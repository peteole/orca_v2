name: Build and Publish

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [published]

env:
  CIBW_BUILD: cp38-* cp39-* cp310-* cp311-* cp312-*
  CIBW_SKIP: "*-win32 *-manylinux_i686"

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-13]  # macos-13 for x86_64, macos-latest for arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cibuildwheel==2.16.2

    - name: Set up MSVC (Windows)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v1.1

    - name: Install CMake (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential

    - name: Install CMake (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake

    - name: Build wheels
      env:
        CIBW_BUILD_VERBOSITY: 1
        CIBW_ENVIRONMENT: CMAKE_BUILD_PARALLEL_LEVEL=4
        CIBW_BEFORE_BUILD: >
          pip install cmake ninja setuptools wheel &&
          mkdir -p build &&
          cd build &&
          cmake -GNinja -DCMAKE_BUILD_TYPE=Release .. &&
          cmake --build . --config Release &&
          cd ..
        CIBW_TEST_COMMAND: pytest {project}/tests/ -v
        CIBW_TEST_REQUIRES: pytest numpy
      run: python -m cibuildwheel --output-dir wheelhouse

    - uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build sdist
      run: python -m build --sdist

    - uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist/*.tar.gz

  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install cmake

    - name: Set up MSVC (Windows)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v1.1

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[test]

    - name: Build C++ binary
      run: |
        mkdir -p build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release ..
        cmake --build . --config Release

    - name: Run tests
      run: pytest tests/ -v

  publish:
    name: Publish to PyPI
    needs: [build_wheels, build_sdist, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'

    steps:
    - uses: actions/download-artifact@v4
      with:
        name: wheels-ubuntu-latest
        path: dist/

    - uses: actions/download-artifact@v4
      with:
        name: wheels-windows-latest
        path: dist/

    - uses: actions/download-artifact@v4
      with:
        name: wheels-macos-latest
        path: dist/

    - uses: actions/download-artifact@v4
      with:
        name: wheels-macos-13
        path: dist/

    - uses: actions/download-artifact@v4
      with:
        name: sdist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true
